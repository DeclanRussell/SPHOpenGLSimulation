#ifndef NGLSCENE_H__
#define NGLSCENE_H__
#include "OpenGLWindow.h"
#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Obj.h>
#include <ngl/TransformStack.h>
#include <ngl/Text.h>
#include <QTimer>
#include <QTime>
#include "SPHMelt.h"
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------

class NGLScene : public OpenGLWindow
{
  Q_OBJECT
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene(QWindow *_parent=0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initialize();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void render();

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A member to store our SPH simulation
    /// @brief would like to make this into an array one day so I can have multiple sims maybe but abitious due simulation demands
    SPHMelt m_SPHGrid;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Set to true if R pressed so we can restart after an update of the scene will be called
    bool m_restart;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Set to true if clicked 3, changes the simulation after an update of the scene will be called
    bool m_toggleSim;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Used to know if we draw our mesh
    bool m_drawMesh;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Used to know if we draw our particles
    bool m_drawParticles;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Stores our play/pause state
    bool m_play;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Set to true if we change the external force so that we change the force next update
    bool m_setForce;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Store our external force position
    ngl::Vec3 m_externalForcePos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Store our external force strength
    float m_forceStrength;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Store our external force radius
    float m_forceRadius;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Store if our external force is pushing or pulling
    bool m_forcePush;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief store the current time of our scene, used in calculating the FPS
    QTime m_currentTime;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief store how big our window is, used for calculation mouse interaction with scene
    int m_windowWidth, m_windowHeight;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Used to update our scene, calls all draw functions and update functions
    void timerEvent(QTimerEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the y rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::TransformStack m_transformStack;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;



    //----------------------------------------------------------------------------------------------------------------------
    /// @brief text for rendering
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Text *m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the mesh with all the data in it
    //----------------------------------------------------------------------------------------------------------------------
    ngl::VertexArrayObject *m_vaoMesh;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief left animation timer
    //----------------------------------------------------------------------------------------------------------------------
    QTimer *m_timerLeft;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief right animation timer
    //----------------------------------------------------------------------------------------------------------------------
    QTimer *m_timerRight;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when the window is re-sized
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void resizeEvent(QResizeEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when a key is pressed
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when a key is released
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void keyReleaseEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------



};



#endif
